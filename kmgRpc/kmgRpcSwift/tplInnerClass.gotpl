<?
package kmgRpcSwift
import (
    "strings"
    "github.com/bronze1man/kmg/kmgStrings"
)
func (config InnerClass)tplInnerClass() string {
?>
    <?if config.IsPublic {}else{?>private<?}?> struct <?=config.Name?>{
        <?for _,field:=range config.FieldList{?>
            var <?=field.Name?>:<?=field.TypeStr?> = <?=field.TypeStr?>()
        <? } ?>
<?if config.IsPublic{?>
mutating func ToData(inData:JSON){
<?for _,field:=range config.FieldList{?>
<?switch field.TypeStr{
        case "Int":?>self.<?=field.Name?> = inData["<?=field.Name?>"].intValue
        <?case "NSString":?>self.<?=field.Name?> = inData["<?=field.Name?>"].stringValue
        <?case "Bool":?>self.<?=field.Name?> = inData["<?=field.Name?>"].boolValue
        <?case "NSDate":?>self.<?=field.Name?> = inData["<?=field.Name?>"].stringValue.toDate(format: DateFormat.ISO8601)!
        <?case "[NSString]","[Int]","[Bool]","[NSDate]":?>self.<?=field.Name?> = inData["<?=field.Name?>"].arrayObject as! <?=field.TypeStr?>
        <?default: if strings.HasPrefix(field.TypeStr,"["){?> inData["Some"].array!.forEach({body in
        <? oneType := kmgStrings.SubStr(field.TypeStr,1,-1)?>
        var one:<?=oneType?> = <?=oneType?>()
        one.ToData(body)
        self.<?=field.Name?>.append(one)
        })<?}else{?>.ToData(inData["<?=field.Name?>"])<?}}?>
    <? } ?>
    }
<?}?>
}
<?
}
?>