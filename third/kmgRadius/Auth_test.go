package kmgRadius

import (
	"fmt"
	"github.com/bronze1man/kmg/encoding/kmgHex"
	"github.com/bronze1man/kmg/kmgTest"
	"github.com/bronze1man/kmg/third/kmgRadius/MSCHAPV2"
	"github.com/bronze1man/kmg/third/kmgRadius/eap"
	"testing"
)

func TestAuthPap(ot *testing.T) {
	//AccessRequest
	inBytes := []byte{0x1, 0xef, 0x0, 0x8e, 0x94, 0xb, 0x18, 0xaf, 0xa, 0xb6, 0x12, 0xf5, 0x24, 0x4, 0x94, 0xbe, 0x18, 0xbc, 0x7, 0x4d,
		0x1, 0x4, 0x72, 0x48, 0x3d, 0x6, 0x0, 0x0, 0x0, 0x5, 0x6, 0x6, 0x0, 0x0, 0x0, 0x2, 0x5, 0x6, 0x0, 0x0, 0x0, 0x10, 0x57,
		0xf, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x73, 0x6b, 0x4, 0x6, 0xa, 0x1, 0x1, 0x5, 0x1e,
		0xf, 0x31, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x2e, 0x35, 0x5b, 0x35, 0x30, 0x30, 0x5d, 0x1f, 0x10, 0x31, 0x30, 0x2e, 0x31,
		0x2e, 0x31, 0x2e, 0x37, 0x30, 0x5b, 0x35, 0x30, 0x30, 0x5d, 0x20, 0xc, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x77,
		0x61, 0x6e, 0x2, 0x12, 0x8d, 0x7, 0xc2, 0xc0, 0xa4, 0x2, 0x2c, 0xed, 0x8e, 0x69, 0x5b, 0x9e, 0x25, 0x77, 0xe5, 0xd, 0x50,
		0x12, 0x39, 0x5c, 0xaa, 0x3e, 0x6d, 0x23, 0xea, 0xb5, 0x86, 0xc1, 0x3, 0x2d, 0x9d, 0x5c, 0x19, 0xca}
	server := server{
		handler: Handler{
			Auth: func(username string) (password string, exist bool) {
				if username != "rH" {
					panic(`username!="rH"`)
				}
				return "O6", true
			},
		},
	}
	inPac, err := DecodeRequestPacket([]byte("sEcReT"), inBytes)
	kmgTest.Ok(err == nil)
	outPac := server.PacketHandler(inPac)
	kmgTest.Equal(outPac.Code, CodeAccessAccept)
}

func TestAuthMschapV2Step1(ot *testing.T) {
	//step 1
	in1 := []byte{ /* Packet 302 */
		0x01, 0x8f, 0x00, 0xb2, 0x5b, 0xb5, 0xce, 0xbf,
		0x70, 0x72, 0xd9, 0xac, 0xd8, 0x4b, 0xe0, 0x66,
		0x5b, 0xa6, 0xc6, 0x74, 0x01, 0x12, 0x79, 0x64,
		0x76, 0x62, 0x49, 0x77, 0x30, 0x63, 0x41, 0x49,
		0x34, 0x37, 0x45, 0x4d, 0x51, 0x57, 0x3d, 0x06,
		0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x00, 0x00,
		0x00, 0x02, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07,
		0x57, 0x0f, 0x69, 0x6f, 0x73, 0x5f, 0x69, 0x6b,
		0x65, 0x76, 0x32, 0x5f, 0x65, 0x61, 0x70, 0x04,
		0x06, 0x78, 0x19, 0xe5, 0xd6, 0x1e, 0x16, 0x31,
		0x32, 0x30, 0x2e, 0x32, 0x35, 0x2e, 0x32, 0x32,
		0x39, 0x2e, 0x32, 0x31, 0x34, 0x5b, 0x34, 0x35,
		0x30, 0x30, 0x5d, 0x1f, 0x17, 0x31, 0x37, 0x35,
		0x2e, 0x31, 0x35, 0x32, 0x2e, 0x31, 0x31, 0x37,
		0x2e, 0x32, 0x30, 0x34, 0x5b, 0x34, 0x35, 0x30,
		0x30, 0x5d, 0x4f, 0x08, 0x02, 0x01, 0x00, 0x06,
		0x03, 0x1a, 0x20, 0x0c, 0x73, 0x74, 0x72, 0x6f,
		0x6e, 0x67, 0x53, 0x77, 0x61, 0x6e, 0x18, 0x12,
		0xb6, 0x64, 0xc6, 0x5c, 0xb6, 0x65, 0xc2, 0x69,
		0x0a, 0x8b, 0x5c, 0xbf, 0xb8, 0xfe, 0x43, 0x79,
		0x50, 0x12, 0x0c, 0x69, 0xf1, 0xef, 0x1a, 0xdb,
		0x42, 0x9c, 0xcb, 0xa0, 0x30, 0xea, 0x0b, 0x31,
		0x92, 0xef}
	server := server{
		handler: Handler{
			Auth: func(username string) (password string, exist bool) {
				if username != "ydvbIw0cAI47EMQW" {
					panic(`username!="ydvbIw0cAI47EMQW"`)
				}
				return "FogWi6Iz8oOkF1If", true
			},
		},
		mschapMap: map[string]mschapStatus{},
	}
	inPac, err := DecodeRequestPacket([]byte("sEcReT"), in1)
	kmgTest.Ok(err == nil, err)
	outPac := server.PacketHandler(inPac)
	kmgTest.Ok(len(outPac.GetEAPMessage().(*eap.MSCHAPV2Packet).MSCHAPV2.(*MSCHAPV2.ChallengePacket).Challenge) > 0)
	kmgTest.Equal(outPac.Code, CodeAccessChallenge)
}

func TestAuthMschapV2Step3(ot *testing.T) {
	//step 3
	in1 := []byte{
		0x01, 0x81, 0x00, 0xf7, 0xf9, 0x19, 0xba, 0x5f,
		0xff, 0xcb, 0xfb, 0x8b, 0x71, 0x90, 0x46, 0x82,
		0x2e, 0xd0, 0x94, 0x76, 0x01, 0x12, 0x79, 0x64,
		0x76, 0x62, 0x49, 0x77, 0x30, 0x63, 0x41, 0x49,
		0x34, 0x37, 0x45, 0x4d, 0x51, 0x57, 0x3d, 0x06,
		0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x00, 0x00,
		0x00, 0x02, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07,
		0x57, 0x0f, 0x69, 0x6f, 0x73, 0x5f, 0x69, 0x6b,
		0x65, 0x76, 0x32, 0x5f, 0x65, 0x61, 0x70, 0x04,
		0x06, 0x78, 0x19, 0xe5, 0xd6, 0x1e, 0x16, 0x31,
		0x32, 0x30, 0x2e, 0x32, 0x35, 0x2e, 0x32, 0x32,
		0x39, 0x2e, 0x32, 0x31, 0x34, 0x5b, 0x34, 0x35,
		0x30, 0x30, 0x5d, 0x1f, 0x17, 0x31, 0x37, 0x35,
		0x2e, 0x31, 0x35, 0x32, 0x2e, 0x31, 0x31, 0x37,
		0x2e, 0x32, 0x30, 0x34, 0x5b, 0x34, 0x35, 0x30,
		0x30, 0x5d, 0x4f, 0x4d, 0x02, 0x02, 0x00, 0x4b,
		0x1a, 0x02, 0x02, 0x00, 0x46, 0x31, 0xdd, 0x67,
		0x8b, 0x50, 0x83, 0x39, 0xee, 0x8c, 0x3c, 0x50,
		0xb8, 0x05, 0x82, 0x9e, 0xdd, 0x8b, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0xf8,
		0x5f, 0xc7, 0xd4, 0x4e, 0x9f, 0x1b, 0x92, 0x23,
		0x87, 0xd2, 0x4e, 0x21, 0xb3, 0xd0, 0xa7, 0x3b,
		0x27, 0xcc, 0x29, 0x14, 0xd4, 0x5a, 0x00, 0x79,
		0x64, 0x76, 0x62, 0x49, 0x77, 0x30, 0x63, 0x41,
		0x49, 0x34, 0x37, 0x45, 0x4d, 0x51, 0x57, 0x20,
		0x0c, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x53,
		0x77, 0x61, 0x6e, 0x18, 0x12, 0xb6, 0x64, 0xc6,
		0x5c, 0xb7, 0x66, 0xdc, 0x69, 0x0a, 0x8b, 0x5c,
		0xbf, 0xb8, 0xfe, 0x43, 0x79, 0x50, 0x12, 0x6a,
		0x2b, 0x7e, 0xbb, 0xb8, 0xab, 0xcd, 0xe7, 0x23,
		0x02, 0x73, 0x45, 0xe6, 0xc2, 0xa2, 0xf7}
	server := server{
		handler: Handler{
			Auth: func(username string) (password string, exist bool) {
				if username != "ydvbIw0cAI47EMQW" {
					panic(`username!="ydvbIw0cAI47EMQW"`)
				}
				return "FogWi6Iz8oOkF1If", true
			},
		},
		mschapMap: map[string]mschapStatus{
			string([]byte{0xb6, 0x64, 0xc6,
				0x5c, 0xb7, 0x66, 0xdc, 0x69, 0x0a, 0x8b, 0x5c,
				0xbf, 0xb8, 0xfe, 0x43, 0x79}): mschapStatus{
				Challenge: [16]byte{0x78, 0xbe, 0x5a, 0xd5, 0xbd, 0x02, 0xce, 0xe8,
					0x11, 0xc4, 0x7b, 0x9a, 0x93, 0x0a, 0x7b, 0x0f},
			},
		},
	}
	inPac, err := DecodeRequestPacket([]byte("sEcReT"), in1)
	kmgTest.Equal(inPac.GetEAPMessage().(*eap.MSCHAPV2Packet).MSCHAPV2.(*MSCHAPV2.ResponsePacket).NTResponse,
		[24]byte{0xd3, 0xf8, 0x5f, 0xc7, 0xd4, 0x4e, 0x9f, 0x1b, 0x92, 0x23, 0x87, 0xd2, 0x4e, 0x21, 0xb3, 0xd0, 0xa7, 0x3b, 0x27, 0xcc, 0x29, 0x14, 0xd4, 0x5a})
	kmgTest.Ok(err == nil, err)
	outPac := server.PacketHandler(inPac)
	fmt.Println(outPac)
	kmgTest.Equal(outPac.GetEAPMessage().(*eap.MSCHAPV2Packet).MSCHAPV2.OpCode(), MSCHAPV2.OpCodeSuccess)
	kmgTest.Equal(kmgHex.EncodeToUpperString(outPac.GetEAPMessage().(*eap.MSCHAPV2Packet).MSCHAPV2.(*MSCHAPV2.SuccessPacket).Auth[:]), "689DE06F16B7AFFB04E8EDCC8C2DE8CCBA78E0A9")
	kmgTest.Equal(outPac.Code, CodeAccessChallenge)
}

func TestAuthMschapV2Step5(ot *testing.T) {
	//step 5
	in1 := []byte{
		0x01, 0x73, 0x00, 0xb2, 0x65, 0x4d, 0x3c, 0x73,
		0x87, 0x8c, 0xfa, 0x28, 0xb6, 0xfd, 0x87, 0x96,
		0xba, 0x96, 0xd2, 0xe7, 0x01, 0x12, 0x79, 0x64,
		0x76, 0x62, 0x49, 0x77, 0x30, 0x63, 0x41, 0x49,
		0x34, 0x37, 0x45, 0x4d, 0x51, 0x57, 0x3d, 0x06,
		0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x00, 0x00,
		0x00, 0x02, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07,
		0x57, 0x0f, 0x69, 0x6f, 0x73, 0x5f, 0x69, 0x6b,
		0x65, 0x76, 0x32, 0x5f, 0x65, 0x61, 0x70, 0x04,
		0x06, 0x78, 0x19, 0xe5, 0xd6, 0x1e, 0x16, 0x31,
		0x32, 0x30, 0x2e, 0x32, 0x35, 0x2e, 0x32, 0x32,
		0x39, 0x2e, 0x32, 0x31, 0x34, 0x5b, 0x34, 0x35,
		0x30, 0x30, 0x5d, 0x1f, 0x17, 0x31, 0x37, 0x35,
		0x2e, 0x31, 0x35, 0x32, 0x2e, 0x31, 0x31, 0x37,
		0x2e, 0x32, 0x30, 0x34, 0x5b, 0x34, 0x35, 0x30,
		0x30, 0x5d, 0x4f, 0x08, 0x02, 0x03, 0x00, 0x06,
		0x1a, 0x03, 0x20, 0x0c, 0x73, 0x74, 0x72, 0x6f,
		0x6e, 0x67, 0x53, 0x77, 0x61, 0x6e, 0x18, 0x12,
		0xb6, 0x64, 0xc6, 0x5c, 0xb4, 0x67, 0xdc, 0x69,
		0x0a, 0x8b, 0x5c, 0xbf, 0xb8, 0xfe, 0x43, 0x79,
		0x50, 0x12, 0xce, 0xf2, 0xb2, 0x87, 0x4b, 0x88,
		0x2e, 0x0b, 0x44, 0xc9, 0x10, 0x6c, 0xca, 0xeb,
		0x74, 0xd3}
	server := server{
		handler: Handler{
			Auth: func(username string) (password string, exist bool) {
				if username != "ydvbIw0cAI47EMQW" {
					panic(`username!="ydvbIw0cAI47EMQW"`)
				}
				return "FogWi6Iz8oOkF1If", true
			},
		},
		mschapMap: map[string]mschapStatus{
			string([]byte{0xb6, 0x64, 0xc6, 0x5c, 0xb4, 0x67, 0xdc, 0x69, 0xa, 0x8b, 0x5c, 0xbf, 0xb8, 0xfe, 0x43, 0x79}): mschapStatus{
				Challenge: [16]byte{0x78, 0xbe, 0x5a, 0xd5, 0xbd, 0x02, 0xce, 0xe8,
					0x11, 0xc4, 0x7b, 0x9a, 0x93, 0x0a, 0x7b, 0x0f},
				NTResponse: [24]byte{0xd3, 0xf8, 0x5f, 0xc7, 0xd4, 0x4e, 0x9f, 0x1b,
					0x92, 0x23, 0x87, 0xd2, 0x4e, 0x21, 0xb3, 0xd0, 0xa7, 0x3b, 0x27,
					0xcc, 0x29, 0x14, 0xd4, 0x5a},
			},
		},
	}
	inPac, err := DecodeRequestPacket([]byte("sEcReT"), in1)
	kmgTest.Ok(err == nil, err)
	outPac := server.PacketHandler(inPac)
	kmgTest.Equal(outPac.Code, CodeAccessAccept)
	kmgTest.Equal(outPac.GetEAPMessage().Header().Code, eap.CodeSuccess)
	kmgTest.Equal(outPac.GetVsa(VendorTypeMSMPPESendKey).(*MSMPPESendOrRecvKeyVSA).Key, []byte{0x34, 0x29, 0xe7, 0x78, 0xe5, 0xad, 0x12, 0x14, 0xbf, 0x82, 0x6f, 0x2e, 0x3d, 0xe7, 0x6a, 0x77})
	kmgTest.Equal(outPac.GetVsa(VendorTypeMSMPPERecvKey).(*MSMPPESendOrRecvKeyVSA).Key, []byte{0x3e, 0x24, 0x79, 0x82, 0xcb, 0x8, 0x1, 0xc7, 0x59, 0x6d, 0x2, 0x94, 0x83, 0xf3, 0x39, 0x1a})
	outB, err := outPac.Encode()
	kmgTest.Equal(err, nil)
	outPac, err = DecodeResponsePacket([]byte("sEcReT"), outB, inPac.Authenticator)
	kmgTest.Equal(err, nil)

	out1 := []byte{
		0x02, 0x73, 0x00, 0xaa, 0xd9, 0x05, 0xde, 0x06,
		0x87, 0xae, 0xa9, 0x95, 0x2a, 0x5f, 0x0a, 0x2c,
		0x59, 0x0a, 0xbe, 0x0b, 0x1a, 0x0c, 0x00, 0x00,
		0x01, 0x37, 0x07, 0x06, 0x00, 0x00, 0x00, 0x01,
		0x1a, 0x0c, 0x00, 0x00, 0x01, 0x37, 0x08, 0x06,
		0x00, 0x00, 0x00, 0x06, 0x1a, 0x2a, 0x00, 0x00,
		0x01, 0x37, 0x10, 0x24, 0x92, 0xc3, 0xf4, 0x53,
		0x23, 0x8a, 0x1b, 0x31, 0x84, 0x16, 0xc0, 0x67,
		0xe2, 0x77, 0x29, 0x1b, 0x03, 0x00, 0xf6, 0x9f,
		0x36, 0x9d, 0x65, 0x6e, 0xdb, 0xd6, 0xfe, 0xe6,
		0x43, 0x9b, 0xe9, 0x2c, 0x29, 0x46, 0x1a, 0x2a,
		0x00, 0x00, 0x01, 0x37, 0x11, 0x24, 0x9e, 0x2b,
		0xf1, 0xf0, 0x6e, 0xf0, 0x20, 0x55, 0x5d, 0x5a,
		0xef, 0x36, 0x00, 0x08, 0x58, 0xce, 0x98, 0x9a,
		0x50, 0x80, 0x1b, 0x4d, 0xd5, 0xea, 0x17, 0xb2,
		0x08, 0xe6, 0xed, 0x0a, 0x21, 0xbb, 0x61, 0x0a,
		0x4f, 0x06, 0x03, 0x03, 0x00, 0x04, 0x50, 0x12,
		0x32, 0xaa, 0x90, 0x86, 0x7b, 0x31, 0xb9, 0xc0,
		0x55, 0x43, 0x64, 0x28, 0xef, 0xe7, 0x1c, 0x25,
		0x01, 0x12, 0x79, 0x64, 0x76, 0x62, 0x49, 0x77,
		0x30, 0x63, 0x41, 0x49, 0x34, 0x37, 0x45, 0x4d,
		0x51, 0x57}
	outPac, err = DecodeResponsePacket([]byte("sEcReT"), out1, [16]byte{0x65, 0x4d, 0x3c, 0x73,
		0x87, 0x8c, 0xfa, 0x28, 0xb6, 0xfd, 0x87, 0x96,
		0xba, 0x96, 0xd2, 0xe7})
	kmgTest.Equal(err, nil)
	kmgTest.Equal(outPac.Code, CodeAccessAccept)
	kmgTest.Equal(outPac.GetEAPMessage().Header().Code, eap.CodeSuccess)
	kmgTest.Equal(outPac.GetVsa(VendorTypeMSMPPESendKey).(*MSMPPESendOrRecvKeyVSA).Key, []byte{0x34, 0x29, 0xe7, 0x78, 0xe5, 0xad, 0x12, 0x14, 0xbf, 0x82, 0x6f, 0x2e, 0x3d, 0xe7, 0x6a, 0x77})
	kmgTest.Equal(outPac.GetVsa(VendorTypeMSMPPERecvKey).(*MSMPPESendOrRecvKeyVSA).Key, []byte{0x3e, 0x24, 0x79, 0x82, 0xcb, 0x8, 0x1, 0xc7, 0x59, 0x6d, 0x2, 0x94, 0x83, 0xf3, 0x39, 0x1a})
}
